# We begin by importing the .appmask file that contains the selector(s).
# In the example the .appmask file is saved in a dedicated folder under the root of the project.
import ".\AppMask\StocksAppMask.appmask"

# In order to save some time and not re-write the complete control path each time.
set TableSelector to StocksAppMask.StocksApp.BloombergWebPage.USAStocksTable

# create a variable to hold the url
set Website to "https://www.bloomberg.com/markets/stocks/world-indexes/americas"

# We then launch a chrome instance with the url of choice.
WebAutomation.LaunchChrome  Url: Website \
                            BrowserInstance=> Browser


# We then run the ExtractHtmlTableInExcel action .
# We are using the Browser instance we have already launched,
# the variable that holds the control selector
# and save the extracted HTML table to an excel instance.
WebAutomation.DataExtraction.ExtractHtmlTableInExcel    BrowserInstance:  Browser \
                                                        Control: TableSelector \
                                                        ExcelInstance=> ExcelInstance


# We save the excel file and close the excel application.
Excel.CloseAndSaveAs Instance: ExcelInstance \
                     DocumentFormat:Excel.ExcelFormat.FromExtension \
                     DocumentPath: "C:\source\robin\Robin-Examples\DataExtractionFromWebPage\USAStocksData.xlsx"

# Finally we close the browser we used.
WebAutomation.CloseWebBrowser BrowserInstance: Browser