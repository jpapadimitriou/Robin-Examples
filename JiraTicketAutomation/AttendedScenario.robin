####################################### .appmask files import ##############################################
# .appmask files must always be imported at the top of the script
import "C:\JiraAppmask.appmask"
################################################## Set-up ##################################################
# variable pointing to the Desktop directory
Folder.GetSpecialFolder SpecialFolder:Folder.SpecialFolder.DesktopDirectory \
                        SpecialFolderPath=> Desktop
                        
set excelFilePath to Desktop + "\test.xlsx"

# variable to hold the path to the excel file we want to open
# note: we will input a false value on purpose to break the test. 
set falsePath to Desktop + "nonexistentfile.xlsx"

# variable to hold the url to our jira account
set projectsURL to "https://robincommunity.atlassian.net/secure/BrowseProjects.jspa"

# variable representing a list that holds the options regarding the importance of the issue 
set priority to ["Lowest", "Low", "Medium", "High", "Highest"]

############################################################################################################

Console.Write Message: " "
Console.Write Message: "================================================================"
Console.Write Message: " "

#Test Excel.Launch & Excel.Close
set CurrentTest to "Test Excel.Launch & Excel.Close"
Console.Write Message: ">>> Executing " + CurrentTest
set TestOutput to "OK"
Excel.Launch Instance=> ExcelInstance
Excel.Close Instance: ExcelInstance
on error 
    set TestOutput to "ERROR"
    call OpenJiraTicket SummaryInput: "Excel.Close won't terminate Excel Instance" \
                        DescriptionInput: "Failure during " + CurrentTest + " smoke test."
end
Console.Write Message: CurrentTest +": " + TestOutput
Console.Write Message: " "
Console.Write Message: "================================================================"
Console.Write Message: " "

#Test Excel.Write & Excel.Read
set CurrentTest to "Test Excel.Write & Excel.Read"
Console.Write Message: ">>> Executing " + CurrentTest
Excel.Launch Instance=> ExcelInstance
Excel.Write Instance: ExcelInstance \
            Value: "This is test text"
Excel.Read  Instance: ExcelInstance \
            Value=> Value
if ( value[0] = "This is test text" ) then
    set TestOutput to "OK"
    Console.Write Message: CurrentTest +": " + TestOutput
else
    set TestOutput to "ERROR"
    Console.Write Message: CurrentTest +": " + TestOutput
    call OpenJiraTicket SummaryInput: "Excel.Write/Read fail" \
                        DescriptionInput: "Failure during " + CurrentTest + " smoke test."
end
Console.Write Message: " "
Console.Write Message: "================================================================"
Console.Write Message: " "

#Test Excel.Save
set CurrentTest to "Test Excel.Save"
Console.Write Message: ">>> Executing " + CurrentTest
set TestOutput to "OK"
Excel.Save Instance: ExcelInstance
on error
    set TestOutput to "ERROR"
    call OpenJiraTicket SummaryInput: "Excel.Save won't save the Excel file" \
                        DescriptionInput: "Failure during " + CurrentTest + " smoke test."
end
Console.Write Message: CurrentTest +": " + TestOutput
Console.Write Message: " "
Console.Write Message: "================================================================"
Console.Write Message: " "

#Test Excel.SaveAs
set CurrentTest to "Test Excel.SaveAs"
Console.Write Message: ">>> Executing " + CurrentTest
set TestOutput to "OK"
Excel.SaveAs    Instance: ExcelInstance \
                DocumentFormat: Excel.ExcelFormat.FromExtension \
                DocumentPath: excelFilePath
on error
    set TestOutput to "ERROR"
    call OpenJiraTicket SummaryInput: "Excel.SaveAs won't save the Excel file" \
                        DescriptionInput: "Failure during " + CurrentTest + " smoke test."
end
Console.Write Message: CurrentTest +": " + TestOutput
Console.Write Message: " "
Console.Write Message: "================================================================"
Console.Write Message: " "

#Test Excel.LaunchAndOpen
set CurrentTest to "Test Excel.LaunchAndOpen"
Console.Write Message: ">>> Executing " + CurrentTest
set TestOutput to "OK"
Excel.LaunchAndOpen Path: falsePath \
                    Instance=> ExcelInstance
on error 
    set TestOutput to "ERROR"
    call OpenJiraTicket SummaryInput: "Excel.LaunchAndOpen won't open the Excel file" \
                        DescriptionInput: "Failure during " + CurrentTest + " smoke test." 
end
Console.Write Message: CurrentTest +": " + TestOutput
Console.Write Message: " "
Console.Write Message: "================================================================"
Console.Write Message: " "


########################################## <Teardown> #########################################################
Excel.Close Instance: ExcelInstance
File.Delete Files: excelFilePath

########################################## <Teardown> #########################################################


################################################# <Functions> #################################################

##################################### <OpenJiraTicket function> ###############################################
/# 
    function that has the user input as input arguments. 
    all the web automation actions (UI related) is happening inside here.
#/


function OpenJiraTicket SummaryInput, DescriptionInput

    # Get current Date and Time
    DateTime.Local  DateTimeFormat:DateTime.DateTimeFormat.DateAndTime \
                CurrentDateTime=> CurrentDateTime
 
    # show a display to the user to select the desired priority of the issue
    Display.SelectFromList  Title:'Priority' \
                        Message:'Please select one of the following choices for priority:' \
                        List: priority \
                        IsTopMost:False \
                        AllowEmpty:False \
                        SelectedItem=> SelectedPriorityItem \
                        SelectedIndex=> SelectedPriorityIndex \
                        ButtonPressed=> ButtonPressed
    
    # check if cancel was pressed
    if (ButtonPressed = "Cancel") then
        exit
    end 
        
    # launch Firefox and navigate to the jira page
    WebAutomation.LaunchFirefox Url: projectsURL \
                                WindowState:WebAutomation.BrowserWindowState.Maximized \
                                BrowserInstance=> Browser

    wait 5
        
    # click on the "Create new Issue" button
    WebAutomation.Click BrowserInstance: Browser \
                        Control: JiraAppmask.Jira.CreateIssueWebPage.CreateNewIssueButton


    wait 2
    # click the "Type" dropdown
    WebAutomation.Click BrowserInstance: Browser \
                        Control: JiraAppmask.Jira.CreateIssueWebPage.IssueTypeDropdown
        
    wait 2
    # choose "Bug" option
    WebAutomation.FormFilling.PopulateTextField BrowserInstance: Browser \
                                                Control: JiraAppmask.Jira.CreateIssueWebPage.IssueTypeDropdown \
                                                Text: "Bug" \
                                                EmulateTyping:False \
                                                UnfocusAfterPopulate:True
    
    wait 2
    # populate the "Summary" textbox
    WebAutomation.FormFilling.PopulateTextField BrowserInstance: Browser \
                                                Control: JiraAppmask.Jira.CreateIssueWebPage.SummaryTextbox \
                                                Text: SummaryInput + " [" + CurrentDateTime + "]" \
                                                EmulateTyping:True \
                                                UnfocusAfterPopulate:False

    wait 2
    # populate the "Description" textbox
    WebAutomation.FormFilling.PopulateTextField BrowserInstance: Browser \
                                                Control: JiraAppmask.Jira.CreateIssueWebPage.DescriptionTextbox \
                                                Text: DescriptionInput \
                                                EmulateTyping:True \
                                                UnfocusAfterPopulate:False
    wait 2
    # click on the Priority dropdown
    WebAutomation.Click BrowserInstance: Browser \
                        Control: JiraAppmask.Jira.CreateIssueWebPage.PriorityDropdown

    if (SelectedPriorityIndex = 0) then
        wait 2
        # select "Lowest" option from the priority dropdown
        WebAutomation.FormFilling.PopulateTextField BrowserInstance: Browser \
                                                    Control: JiraAppmask.Jira.CreateIssueWebPage.PriorityDropdown \
                                                    Text: "Lowest"  \
                                                    EmulateTyping:False \
                                                    UnfocusAfterPopulate:True
    else if (SelectedPriorityIndex = 1) then
        wait 2
        # select "Low" option from the priority dropdown
        WebAutomation.FormFilling.PopulateTextField BrowserInstance: Browser \
                                                    Control: JiraAppmask.Jira.CreateIssueWebPage.PriorityDropdown \
                                                    Text: "Low" \
                                                    EmulateTyping:False \
                                                    UnfocusAfterPopulate:True
    else if (SelectedPriorityIndex = 2) then
         wait 2
         # select "Medium" option from the priority dropdown
         WebAutomation.FormFilling.PopulateTextField BrowserInstance: Browser \
                                                     Control: JiraAppmask.Jira.CreateIssueWebPage.PriorityDropdown \
                                                     Text: "Medium" \
                                                     EmulateTyping:False \
                                                     UnfocusAfterPopulate:True
    else if (SelectedPriorityIndex = 3) then
         wait 2
         # select "High" option from the priority dropdown
         WebAutomation.FormFilling.PopulateTextField BrowserInstance: Browser \
                                                     Control: JiraAppmask.Jira.CreateIssueWebPage.PriorityDropdown \
                                                     Text: "High" \
                                                     EmulateTyping:False \
                                                     UnfocusAfterPopulate:True
    else if (SelectedPriorityIndex = 4) then
         wait 2
         # select "Highest" option from the priority dropdown
         WebAutomation.FormFilling.PopulateTextField BrowserInstance: Browser \
                                                     Control: JiraAppmask.Jira.CreateIssueWebPage.PriorityDropdown \
                                                     Text: "Highest" \
                                                     EmulateTyping:False \
                                                     UnfocusAfterPopulate:True
    end


    wait 2
    # Click the "Create" button 
    WebAutomation.Click BrowserInstance: Browser \
                        Control: JiraAppmask.Jira.CreateIssueWebPage.CreateIssueButton

    wait 2
    # close Firefox
    WebAutomation.CloseWebBrowser BrowserInstance: Browser
end
##################################### </PopulateIssueFields function> #########################################

################################################ </Functions> #################################################